// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package azdosdkmocks is a generated GoMock package.
package azdosdkmocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	tokens "github.com/microsoft/azure-devops-go-api/azuredevops/v7/tokens"
)

// MockTokenClient is a mock of Client interface.
type MockTokenClient struct {
	ctrl     *gomock.Controller
	recorder *MockTokenClientMockRecorder
}

// MockTokenClientMockRecorder is the mock recorder for MockClient.
type MockTokenClientMockRecorder struct {
	mock *MockTokenClient
}

// NewMockClient creates a new mock instance.
func NewMockTokenClient(ctrl *gomock.Controller) *MockTokenClient {
	mock := &MockTokenClient{ctrl: ctrl}
	mock.recorder = &MockTokenClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenClient) EXPECT() *MockTokenClientMockRecorder {
	return m.recorder
}

// CreatePat mocks base method.
func (m *MockTokenClient) CreatePat(arg0 context.Context, arg1 tokens.CreatePatArgs) (*tokens.PatTokenResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePat", arg0, arg1)
	ret0, _ := ret[0].(*tokens.PatTokenResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePat indicates an expected call of CreatePat.
func (mr *MockTokenClientMockRecorder) CreatePat(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePat", reflect.TypeOf((*MockTokenClient)(nil).CreatePat), arg0, arg1)
}

// GetPat mocks base method.
func (m *MockTokenClient) GetPat(arg0 context.Context, arg1 tokens.GetPatArgs) (*tokens.PatTokenResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPat", arg0, arg1)
	ret0, _ := ret[0].(*tokens.PatTokenResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPat indicates an expected call of GetPat.
func (mr *MockTokenClientMockRecorder) GetPat(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPat", reflect.TypeOf((*MockTokenClient)(nil).GetPat), arg0, arg1)
}

// ListPats mocks base method.
func (m *MockTokenClient) ListPats(arg0 context.Context, arg1 tokens.ListPatsArgs) (*tokens.PagedPatResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPats", arg0, arg1)
	ret0, _ := ret[0].(*tokens.PagedPatResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPats indicates an expected call of ListPats.
func (mr *MockTokenClientMockRecorder) ListPats(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPats", reflect.TypeOf((*MockTokenClient)(nil).ListPats), arg0, arg1)
}

// Revoke mocks base method.
func (m *MockTokenClient) Revoke(arg0 context.Context, arg1 tokens.RevokeArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Revoke", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Revoke indicates an expected call of Revoke.
func (mr *MockTokenClientMockRecorder) Revoke(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Revoke", reflect.TypeOf((*MockTokenClient)(nil).Revoke), arg0, arg1)
}

// UpdatePat mocks base method.
func (m *MockTokenClient) UpdatePat(arg0 context.Context, arg1 tokens.UpdatePatArgs) (*tokens.PatTokenResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePat", arg0, arg1)
	ret0, _ := ret[0].(*tokens.PatTokenResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePat indicates an expected call of UpdatePat.
func (mr *MockTokenClientMockRecorder) UpdatePat(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePat", reflect.TypeOf((*MockTokenClient)(nil).UpdatePat), arg0, arg1)
}
